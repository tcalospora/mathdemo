fldaxy: subroutine
	sta fexp
        sty fhi
        stx flo
        rts
        
fmov: subroutine
	lda fexp,x
        sta fexp,y
        lda fhi,x
        sta fhi,y
        lda flo,x
        sta flo,y
        rts
        
        
fadd: subroutine
	stx floatx
        sty floaty
        
        lda fexp,y
        cmp #zeroexp
        beq .x
        
        lda fexp,x
        cmp #zeroexp
        beq .y
        
        cmp fexp,y
        bpl .noswitch
.switchxy
	txa
        ldx identity,y
        tay
.noswitch
	
        lda fexp,x
        sta ftemp0
        lda flo,x
        sta ftemp1
        lda fhi,x
        ora #%10000000
        sta ftemp2
        
        lda fexp,y
        sta ftemp3
        lda flo,y
        sta ftemp4
        lda fhi,y
        ora #%10000000
        sta ftemp5
        
        lda fhi,x
        and #%10000000
        sta fsign
        eor fhi,y
        and #%10000000
        sta fdiff
        
        lda fexp,x
        sec
        sbc fexp,y
        beq .equalexponent
        tay
        lda ftemp1
.shiftloop
        lsr ftemp2
        ror
        dey
        bne .shiftloop
        ror ftemp5 ;save .5 bit for rounding
	sta ftemp2
.equalexponent
	ldy fexp,x
	lda fdiff
        bpl .add
        bmi .subtract        
.add
	lda ftemp1
        clc
        adc ftemp3
        sta rlo
        lda ftemp2
        adc ftemp4
        sta rhi
        bcc .normalized
	iny
        ror rhi
        ror rlo
        ror ftemp5
.normalized
	rol ftemp5
        lda rlo
        adc #0
        sta rlo
        lda rhi
        adc #0
        sta rhi
        
        ldx outputmem
        


multpointerinit: subroutine
    lda #>squaretable1l
    sta lmul0+1

    lda #>squaretable1h
    sta lmul1+1

    lda #>squaretable2l
    sta lmul2+1

    lda #>squaretable2h
    sta lmul3+1
    rts